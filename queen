#include <iostream>
using namespace std;

const int N = 8; 
int board[N][N] = {0};

void printBoard(int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == 1) cout << "Q ";
            else cout << ". ";
        }
        cout << endl;
    }
    cout << endl;
}

bool isSafe(int row, int col, int n) {
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 1) return false;
    }

    
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) return false;
    }

    for (int i = row, j = col; i >= 0 && j < n; i--, j++) {
        if (board[i][j] == 1) return false;
    }

    return true;
}

bool solveNQueens(int row, int n) {
    if (row == n) {
        printBoard(n);
        return true;
    }

    for (int col = 0; col < n; col++) {
        if (isSafe(row, col, n)) {
            board[row][col] = 1; // Place queen
            if (solveNQueens(row + 1, n)) return true;
            board[row][col] = 0; // Backtrack: Remove queen
        }
    }
    return false;
}

int main() {
    int n;
    cout << "Enter the value of n: ";
    cin >> n;

    if (n > N) {
        cout << "The maximum supported board size is " << N << endl;
        return 1;
    }

    if (!solveNQueens(0, n)) {
        cout << "No solution exists for " << n << " queens." << endl;
    }

    return 0;
}

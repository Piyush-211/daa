#include <iostream>
#include <algorithm>
using namespace std;

struct Item {
    int weight;
    int profit;
};

// Function to calculate the maximum profit
bool compare(Item a, Item b) {
    // Sort items by profit-to-weight ratio in descending order
    double r1 = (double)a.profit / a.weight;
    double r2 = (double)b.profit / b.weight;
    return r1 > r2;
}

double fractionalKnapsack(Item items[], int n, int capacity) {
    // Sort items by profit-to-weight ratio
    sort(items, items + n, compare);

    double maxProfit = 0.0;  // Maximum profit

    for (int i = 0; i < n && capacity > 0; i++) {
        if (items[i].weight <= capacity) {
            // If the item can be fully included
            capacity -= items[i].weight;
            maxProfit += items[i].profit;
        } else {
            // If only part of the item can be included
            maxProfit += items[i].profit * ((double)capacity / items[i].weight);
            capacity = 0;  // Knapsack is full
        }
    }

    return maxProfit;
}

int main() {
    int n, capacity;
    cout << "Enter number of items and knapsack capacity: ";
    cin >> n >> capacity;

    Item items[n];
    cout << "Enter weights and profits of each item:\n";
    for (int i = 0; i < n; i++) {
        cout << "Weight and Profit of item " << i + 1 << ": ";
        cin >> items[i].weight >> items[i].profit;
    }

    double maxProfit = fractionalKnapsack(items, n, capacity);
    cout << "Maximum profit: " << maxProfit << endl;
    return 0;
}
